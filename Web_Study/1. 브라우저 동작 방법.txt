<브라우저 주요 기능>
사용자가 선택한 자원을 서버에 요청, 브라우저에 표시함.
자원은 html 문서, pdf, image 등 다양한 형태로 이루어짐.
자원의 주소는 URI에 의해 정해짐.

<브라우저 기본 구조>
사용자 인터페이스 - 주소 표시줄, 이전/다음 버튼, 북마크 등 사용자가 활용하는 서비스들
브라우저 엔진 - 사용자 인터페이스와 렌더링 엔진 사이의 동작 제어
렌더링 엔진 - 요청한 콘텐츠 표시 (Hhtml 요청이 들어오면? -> html, css 파싱해서 화면에 표시)
통신 - http 요청과 같은 네트웤 ㅡ호출에 사용 (플랫폼의 독립적인 인터페이스로 구성되어있음)
UI 백엔드 - 플랫폼에서 명시하지 않은 일반적 인터페이스. 콤보 박스 창같은 기본적 장치를 그림
자바스크립트 해석기 - 자바스크립트 코드를 해석하고 실행
자료 저장소 - 쿠키 등 모든 종류의 자원을 하드 디스크에 저장하는 계층

* 렌더링이란?
html, xml 문서와 이미지를 표시할 수 있으며 플러그인이나 브라우저 확장 기능으로 pdf 등 다른 유형도 표시가 가능한 엔진이다.
종류로는 웹킷 엔진(크롬, 사파리 사용), 파이어폭스 엔진(케코 사용) 이 존재한다.
	웹킷(Webkit): 최초 리눅스 플랫폼에 동작하기 위한 오픈소스 엔진
DOM 트리 구축을 위한 HTML 파싱 -> 렌더 트리 구촉 -> 렌더 트리 배치 -> 렌더 트리 그리기 순으로 동작한다.

** DOM(Document Object Model = 문서 객체 모델)이란?
웹페이퍼 소스를 까보면 <html>, <body>와 같은 태그들이 존재한다. 이를 JavaScript가 활용할 수 있는  객체로 만들면 문서 객체가 된다.
모델은 말 그대로, 모듈화로 만들었다거나 객체를 인식한다라고 해석하면 된다.
즉, DOM은 웹 브라우저가 html 페이지를 인식하는 방식을 말한다.(트리구조)

<웹킷 동작 구조>		     DOM
			      ↓
HTML    ->    HTML 파서    ->     DOM 트리	배치
			      ↓		  ↕
			  어테치먼트 -> 렌더트리 -> 그리기 -> 표시
			      ↑
StyleSheets -> CSS파서 -> 스타일 규칙

* 어태치먼트 : 웹킷이 렌더 트리를 생성하기 위해 DOM 노드와 스타일 정보를 연결하는 과정

<파싱과 DOM 트리 구축>
파싱(parsing) : 문서 파싱은, 브라우저가 코드를 이해하고 사용할 수 있는 구조로 변환하는 것이다.

문서를 가지고, 어휘 분석과 구문 분석 과정을 거쳐 파싱 트리를 구축한다.
어휘 분석기를 통해 언어의 구문 규칙에 따라 문서 구조를 분석한다. 해당 과정에서 구문 규칙과 일치하는지 비교 후 일치하는 노드만 파싱 트리에 추가시킨다.(규칙에 맞지 않는 부분은 문서가 유효하지 않고 구문 오류가 포함되어 있다는 의미)

파서 트리가 나오지만 이는 컴파일 과정일 뿐, 다시 기계코드 문서로 변환시키는 과정까지 완료되어야 최종 결과물이 나온다.

보통 이렇게 파서를 생성하는 것은 문법에 대한 규칙 부여 등이 복잡하고 최적화하기 힘들기에 파서 생성기를 이용해 자동으로 생성한다.

이런 과정을 거치며 서버로부터 받은 문서를 브라우저가 이해하기 쉽게 사용할 수 있는 DOM 트리구조로 변환시킨다.